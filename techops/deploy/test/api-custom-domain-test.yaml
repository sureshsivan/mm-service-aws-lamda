# Root File for non cdn based cloud formation template
#
AWSTemplateFormatVersion: '2010-09-09'
Description: "TEst CF Custom type for API Gateway custom domain"
Parameters:
  ParamApiDomainName:
    Type: String
    Default: ParamApiDomainName-test
  ParamCertificateName:
    Type: String
    Default: ParamCertificateName-test
  ParamCertificateBodyEncoded:
    Type: String
    Default: ParamCertificateBody-test
  ParamCertificateChainEncoded:
    Type: String
    Default: ParamCertificateChain-test
  ParamCertificatePrivateKeyEncoded:
    Type: String
    Default: ParamCertificatePrivateKey-test
Resources:
  ResourceLambdaExecuteIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - apigateway:*
            Resource: arn:aws:apigateway:*:*:*
  ResourceApiGatewayCustomDomainLambdaFn:
    Type: AWS::Lambda::Function
    DependsOn:
      - ResourceLambdaExecuteIamRole
    Properties:
      Handler: index.handler
      Role: !GetAtt ResourceLambdaExecuteIamRole.Arn
      FunctionName: LamdaFnApiGatewayCustomDomainCreator
      Code:
        ZipFile: !Sub |
          var response = require('cfn-response');
          var AWS = require('aws-sdk');
          var apigateway = new AWS.APIGateway();
          var decodeBase64 = function(base64str) {
              var decoded = new Buffer(base64str, 'base64').toString('ascii');
              return decoded;
          }
          exports.handler = function(event, context) {
            var responseData = {}, reqParams = {};
            var reqCallback = function(err, data){
              if(err){
                responseData['error'] = 'API Custom Domain Operation Failed OP: ' + event.RequestType;
                console.log('REQUEST FAILED:\\n', JSON.stringify(responseData));
                response.send(event, context, response.FAILED, responseData);
              } else {
                responseData['data'] = data;
                console.log('REQUEST SUCCESS:\\n', JSON.stringify(responseData));
                response.send(event, context, response.SUCCESS, responseData);
              }
            };
            console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));
            if(event.RequestType == 'Create'){
              reqParams['certificateBody'] = decodeBase64(event.ResourceProperties.certificateBody);
              reqParams['certificateChain'] = decodeBase64(event.ResourceProperties.certificateChain);
              reqParams['certificateName'] = event.ResourceProperties.certificateName;
              reqParams['certificatePrivateKey'] = decodeBase64(event.ResourceProperties.certificatePrivateKey);
              reqParams['domainName'] = event.ResourceProperties.domainName;
              var apigReq = apigateway.createDomainName(reqParams, reqCallback);
              console.log("Create Custom Domain Request Triggered >>> ", JSON.stringify(apigReq));
            } else if(event.RequestType == 'Update'){
              console.log('UPDATE Operation makes no iumpact on API Gateway - to do things manually');
              response.send(event, context, response.SUCCESS, responseData)
              return;
            } else if(event.RequestType == 'Delete'){
              reqParams['domainName'] = event.ResourceProperties.domainName;
              var apigReq = apigateway.deleteDomainName(reqParams, reqCallback);
              console.log("Delete Custom Domain Request Triggered >>> ", JSON.stringify(apigReq));
            }
            //response.send(event, context, response.SUCCESS, responseData);
          };
      Runtime: nodejs
  ResourceApiGatewayCustomDomain:
    Type: Custom::ResourceApiGatewayCustomDomain
    DependsOn:
      - ResourceApiGatewayCustomDomainLambdaFn
    Properties:
      ServiceToken: !GetAtt ResourceApiGatewayCustomDomainLambdaFn.Arn
      domainName:
        Ref: ParamApiDomainName
      certificateName:
        Ref: ParamCertificateName
      certificateBody:
        Ref: ParamCertificateBodyEncoded
      certificateChain:
        Ref: ParamCertificateChainEncoded
      certificatePrivateKey:
        Ref: ParamCertificatePrivateKeyEncoded
  ResourceApiGatewayBsepathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    DependsOn:
      - ResourceApiGatewayCustomDomain
    Properties:
      DomainName:
        Ref: ParamApiDomainName
      RestApiId:
        e8wvt7fte0
#        Ref: ResourceApiGatewayRestApi
      Stage:
        v1

