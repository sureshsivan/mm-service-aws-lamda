# Root File for non cdn based cloud formation template
# https://juanvicenteherrera.eu/2013/11/18/cloudformation-and-vpc-real-examples-part-i/
AWSTemplateFormatVersion: '2010-09-09'
Description: "TEst CF Custom type for API Gateway custom domain"
Parameters:
  ParamVpcClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  ParamDbUsername:
    Type: String
    Default: TestUser
  ParamDbPassword:
    Type: String
    Default: testpossward
Resources:
  # ResourceCustomVPC:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     CidrBlock:
  #       !Sub '10.${ParamVpcClassB}.0.0/16'
  #     EnableDnsSupport: true
  #     EnableDnsHostnames: true
  #     InstanceTenancy: default
  #     Tags:
  #       - Key:
  #           Name
  #         Value:
  #           !Sub 'VPC-10.${ParamVpcClassB}.0.0/16'
  # ResourceInternetGateway:
  #   Type: 'AWS::EC2::InternetGateway'
  #   Properties:
  #     Tags:
  #       - Key:
  #           Name
  #         Value:
  #           !Sub 'IGW-10.${ParamVpcClassB}.0.0/16'
  # ResourceVPCInternetGatewayAttachment:
  #   Type: 'AWS::EC2::VPCGatewayAttachment'
  #   Properties:
  #     VpcId: !Ref ResourceCustomVPC
  #     InternetGatewayId: !Ref ResourceInternetGateway
  # ResourcePublicSubnetA:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     AvailabilityZone:
  #       !Select [0, !GetAZs '']
  #     CidrBlock:
  #       !Sub '10.${ParamVpcClassB}.0.0/24'
  #     MapPublicIpOnLaunch: true
  #     VpcId:
  #       !Ref ResourceCustomVPC
  #     Tags:
  #     - Key:
  #         Name
  #       Value:
  #         !Sub 'SUBNET-10.${ParamVpcClassB}.0.0/24'
  #     - Key:
  #         Reach
  #       Value:
  #         public
  # ResourcePublicSubnetB:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     AvailabilityZone:
  #       !Select [1, !GetAZs '']
  #     CidrBlock:
  #       !Sub '10.${ParamVpcClassB}.1.0/24'
  #     MapPublicIpOnLaunch: true
  #     VpcId:
  #       !Ref ResourceCustomVPC
  #     Tags:
  #     - Key:
  #         Name
  #       Value:
  #         !Sub 'SUBNET-10.${ParamVpcClassB}.1.0/24'
  #     - Key:
  #         Reach
  #       Value:
  #         public
  # ResourceRouteTablePublic:
  #   Type: 'AWS::EC2::RouteTable'
  #   Properties:
  #     VpcId:
  #       !Ref ResourceCustomVPC
  #     Tags:
  #       - Key:
  #           Name
  #         Value:
  #           CustomPublicRouteTable
  # ResourceRouteTablePrivate:
  #   Type: 'AWS::EC2::RouteTable'
  #   Properties:
  #     VpcId:
  #       !Ref ResourceCustomVPC
  #     Tags:
  #       - Key:
  #           Name
  #         Value:
  #           CustomPrivateRouteTable
  # ResourceRouteTablePublicSubnetA:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId:
  #       !Ref ResourcePublicSubnetA
  #     RouteTableId:
  #       !Ref ResourceRouteTablePublic
  # ResourceRouteTablePublicSubnetB:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId:
  #       !Ref ResourcePublicSubnetB
  #     RouteTableId:
  #       !Ref ResourceRouteTablePublic
  # ResourceRouteTableInternetGatewayRoute:
  #   Type: 'AWS::EC2::Route'
  #   Properties:
  #     RouteTableId:
  #       !Ref ResourceRouteTablePublic
  #     DestinationCidrBlock: '0.0.0.0/0'
  #     GatewayId:
  #       !Ref ResourceInternetGateway
  # ResourcePublicNetworkAcl:
  #   Type: 'AWS::EC2::NetworkAcl'
  #   Properties:
  #     VpcId:
  #       !Ref ResourceCustomVPC
  #     Tags:
  #     - Key:
  #         Name
  #       Value:
  #         CustomPublicACL
  # ResourcePrivateNetworkAcl:
  #   Type: 'AWS::EC2::NetworkAcl'
  #   Properties:
  #     VpcId:
  #       !Ref ResourceCustomVPC
  #     Tags:
  #     - Key:
  #         Name
  #       Value:
  #         CustomPrivateACL
  # ResourcePublicNetworkACLSubnetAAssociation:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId:
  #       !Ref ResourcePublicSubnetA
  #     NetworkAclId:
  #       !Ref ResourcePublicNetworkAcl
  # ResourcePublicNetworkACLSubnetBAssociation:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId:
  #       !Ref ResourcePublicSubnetB
  #     NetworkAclId:
  #       !Ref ResourcePublicNetworkAcl
  ResourcePublicNetworkAclIngressAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
        !Ref ResourcePublicNetworkAcl
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  ResourcePublicNetworkAclEgressAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
        !Ref ResourcePublicNetworkAcl
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  ResourceMySqlDatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription:
        'test'
      VpcId:
        !Ref ResourceCustomVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
  ResourcePostgresDatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription:
        'test'
      VpcId:
        !Ref ResourceCustomVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 0.0.0.0/0
  ResourceDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'DB subnet group'
      SubnetIds:
      - !Ref ResourcePublicSubnetA
      - !Ref ResourcePublicSubnetB
#  ResourceMySqlDatabase:
#    Type: 'AWS::RDS::DBInstance'
#    Properties:
#      Engine: MySQL
#      EngineVersion: 5.7.11
#      AllocatedStorage: 20
#      DBInstanceClass:
#        db.t2.micro
#      MultiAZ: false
#      StorageType: gp2
#      MasterUsername: ParamDbUsername
#      MasterUserPassword: ParamDbPassword
#      # ---- page 2 in RDS
#      DBSubnetGroupName:
#        !Ref ResourceDBSubnetGroup
#      VPCSecurityGroups:
#        - !Ref ResourceMySqlDatabaseSecurityGroup
#      PubliclyAccessible: true
#      DBName: test
#      Port: 3306
#      BackupRetentionPeriod: 3
  ResourcePostgreDatabase:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: postgres
      EngineVersion: 9.5.4
      AllocatedStorage: 20
      DBInstanceClass:
        db.t2.micro
      MultiAZ: false
      StorageType: gp2
      MasterUsername: 
        !Ref ParamDbUsername
      MasterUserPassword: 
        !Ref ParamDbPassword
      DBSubnetGroupName:
        !Ref ResourceDBSubnetGroup
      VPCSecurityGroups:
        - !Ref ResourcePostgresDatabaseSecurityGroup
      PubliclyAccessible: true
      DBName: test
      Port: 5432
      BackupRetentionPeriod: 3
Outputs:
  DBAddress:
    Description: Database endpoint address
    Value:
      Fn::GetAtt:
        - ResourcePostgreDatabase
        - Endpoint.Address
  DBPort:
    Description: Database endpoint port number
    Value:
      Fn::GetAtt:
        - ResourcePostgreDatabase
        - Endpoint.Port

