# Root File for non cdn based cloud formation template
# https://juanvicenteherrera.eu/2013/11/18/cloudformation-and-vpc-real-examples-part-i/
AWSTemplateFormatVersion: '2010-09-09'
Description: "TEst CF Custom type for API Gateway custom domain"
Parameters:
  ParamClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
Resources:
  ResourceCustomVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        !Sub '10.${ParamClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key:
            Name
          Value:
            !Sub 'VPC-10.${ParamClassB}.0.0/16'
  ResourceInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key:
            Name
          Value:
            !Sub 'IGW-10.${ParamClassB}.0.0/16'
  ResourceVPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref ResourceCustomVPC
      InternetGatewayId: !Ref ResourceInternetGateway
  ResourcePublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        !Select [0, !GetAZs '']
      CidrBlock:
        !Sub '10.${ParamClassB}.0.0/24'
      MapPublicIpOnLaunch: true
      VpcId:
        !Ref ResourceCustomVPC
      Tags:
      - Key:
          Name
        Value:
          !Sub 'SUBNET-10.${ParamClassB}.0.0/24'
      - Key:
          Reach
        Value:
          public
  ResourcePublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        !Select [1, !GetAZs '']
      CidrBlock:
        !Sub '10.${ParamClassB}.1.0/24'
      MapPublicIpOnLaunch: true
      VpcId:
        !Ref ResourceCustomVPC
      Tags:
      - Key:
          Name
        Value:
          !Sub 'SUBNET-10.${ParamClassB}.1.0/24'
      - Key:
          Reach
        Value:
          public
  ResourceRouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        !Ref ResourceCustomVPC
      Tags:
        - Key:
            Name
          Value:
            CustomPublicRouteTable
  ResourceRouteTablePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        !Ref ResourceCustomVPC
      Tags:
        - Key:
            Name
          Value:
            CustomPrivateRouteTable
  ResourceRouteTablePublicSubnetA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        !Ref ResourcePublicSubnetA
      RouteTableId:
        !Ref ResourceRouteTablePublic
  ResourceRouteTablePublicSubnetB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        !Ref ResourcePublicSubnetB
      RouteTableId:
        !Ref ResourceRouteTablePublic
  ResourceRouteTableInternetGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        !Ref ResourceRouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        !Ref ResourceInternetGateway
  ResourcePublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId:
        !Ref ResourceCustomVPC
      Tags:
      - Key:
          Name
        Value:
          CustomPublicACL
  ResourcePrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId:
        !Ref ResourceCustomVPC
      Tags:
      - Key:
          Name
        Value:
          CustomPrivateACL
  ResourcePublicNetworkACLSubnetAAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId:
        !Ref ResourcePublicSubnetA
      NetworkAclId:
        !Ref ResourcePublicNetworkAcl
  ResourcePublicNetworkACLSubnetBAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId:
        !Ref ResourcePublicSubnetB
      NetworkAclId:
        !Ref ResourcePublicNetworkAcl
  ResourcePublicNetworkAclIngressAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
        !Ref ResourcePublicNetworkAcl
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  ResourcePublicNetworkAclEgressAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
        !Ref ResourcePublicNetworkAcl
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription:
        'test'
      VpcId:
        Ref: ResourceCustomVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref WebServerSecurityGroup
  ResourceDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'DB subnet group'
      SubnetIds:
      - Ref: ResourcePublicSubnetA
      - Ref: ResourcePublicSubnetB
  Database:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: 5
      BackupRetentionPeriod: 0
      DBInstanceClass:
        !Ref DBServerInstanceType
      DBName: test
      Engine: MySQL
      MasterUsername: wordpress
      MasterUserPassword: wordpress
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName:
        !Ref ResourceDBSubnetGroup
      MultiAZ: true
      StorageType: gp2